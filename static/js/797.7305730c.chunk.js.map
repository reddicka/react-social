{"version":3,"file":"static/js/797.7305730c.chunk.js","mappings":"4NASIA,GAAeC,EAAAA,EAAAA,GAAU,IA2EzBC,GAAiBC,EAAAA,EAAAA,GAAU,CAAEC,KAAM,SAAlBD,EAzEH,SAACE,GACf,OACI,kBAAMC,SAAUD,EAAME,aAAa,WAC/B,4BACI,kBAAOC,QAAQ,QAAO,oBAAc,mBACpC,SAAC,IAAK,CACFC,UAAWC,EAAAA,EACXC,YAAY,QAEZC,KAAK,QACLC,GAAG,QACHC,YAAY,QACZC,KAAK,QACLC,aAAa,QACbC,SAAU,CAACC,EAAAA,EAAUlB,SAI7B,4BACI,kBAAOQ,QAAQ,WAAU,mDAAe,mBACxC,SAAC,IAAK,CACFC,UAAWC,EAAAA,EACXC,YAAY,QAEZC,KAAK,WACLC,GAAG,WACHC,YAAY,uCACZC,KAAK,WACLC,aAAa,WACbC,SAAU,CAACC,EAAAA,EAAUlB,SAI7B,4BACI,kBAAOQ,QAAQ,aAAY,qEAC3B,SAAC,IAAK,CACFC,UAAWC,EAAAA,EACXC,YAAY,QAEZC,KAAK,aACLC,GAAG,aACHE,KAAK,gBAITV,EAAMc,aACN,4BACI,kBAAOX,QAAQ,UAAS,wFACxB,SAAC,IAAK,CACFC,UAAWC,EAAAA,EACXC,YAAY,QAEZC,KAAK,UACLC,GAAG,UACHE,KAAK,QACLE,SAAU,CAACC,EAAAA,MAEf,gBAAKE,IAAKf,EAAMc,WAAYE,IAAI,gBAKxC,0BACI,mBAAQN,KAAK,SAAQ,8CAIrBV,EAAMiB,QAAS,gBAAKC,UAAWC,EAAAA,EAAAA,iBAAwB,SAAEnB,EAAMiB,UAI/E,IAwBA,WAAeG,EAAAA,EAAAA,KALS,SAACC,GAAK,MAAM,CAChCC,OAAQD,EAAME,KAAKD,OACnBR,WAAYO,EAAME,KAAKT,WAC1B,GAEuC,CACpCU,MAAAA,EAAAA,GACAC,cAAAA,EAAAA,IAFJ,EApBc,SAACzB,GAKX,OAAIA,EAAMsB,QAAe,SAAC,KAAQ,CAACI,GAAI,cAGnC,iCACI,mCACA,SAAC7B,EAAc,CAACI,SATP,SAAC0B,GACd3B,EAAMwB,MAAMG,EAASC,MAAOD,EAASE,SAAUF,EAASG,WAAYH,EAASI,QACjF,EAO4CjB,WAAYd,EAAMc,eAGlE,G,6IChGaT,EAAc,SAAH,GAA8C,IAAzC2B,EAAK,EAALA,MAAOC,EAAI,EAAJA,KAAM3B,EAAW,EAAXA,YAAgBN,GAAK,YACvDkC,EAAWD,EAAKE,SAAWF,EAAKhB,MAEpC,OACA,iBAAKC,UAAWC,EAAAA,EAAAA,YAAqB,KAAOe,EAAWf,EAAAA,EAAAA,MAAe,IAAI,UACrEiB,EAAAA,cAAoB9B,GAAY,kBAAK0B,GAAUhC,IAC/CkC,IAAY,uBAAID,EAAKhB,UAG9B,C,8ECZO,IAAMJ,EAAW,SAACwB,GACrB,IAAIA,EAGJ,MAAO,8FACX,EAEazC,EAAY,SAACA,GAAS,OAAK,SAACyC,GACrC,GAAIA,EAAMC,OAAS1C,EACf,MAAM,iEAAN,OAAsBA,EAAS,qDAGvC,CAAC,C,qBCXD,KAAgB,YAAc,mCAAmC,MAAQ,6BAA6B,iBAAmB,wC","sources":["components/Login/Login.jsx","components/common/FormsControls/FormsControls.jsx","utils/validators/validators.jsx","webpack://react-piska/./src/components/common/FormsControls/FormsControls.module.css?eb50"],"sourcesContent":["import {Field, reduxForm} from \"redux-form\";\r\nimport {FormControl} from \"../common/FormsControls/FormsControls\";\r\nimport {maxLength, required} from \"../../utils/validators/validators\";\r\nimport {getCaptchaUrl, login} from \"../../redux/auth-reducer\";\r\nimport {connect} from \"react-redux\";\r\nimport {Navigate} from \"react-router-dom\";\r\nimport React from \"react\";\r\nimport styles from \"../common/FormsControls/FormsControls.module.css\"\r\n\r\nlet maxLengthNum = maxLength(30)\r\n\r\nconst LoginForm = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <label htmlFor='email'>Email</label><br/>\r\n                <Field\r\n                    component={FormControl}\r\n                    formElement='input'\r\n\r\n                    name='email'\r\n                    id='email'\r\n                    placeholder='Email'\r\n                    type='email'\r\n                    autoComplete='email'\r\n                    validate={[required, maxLengthNum]}\r\n                />\r\n            </div>\r\n\r\n            <div>\r\n                <label htmlFor='password'>Пароль</label><br/>\r\n                <Field\r\n                    component={FormControl}\r\n                    formElement='input'\r\n\r\n                    name='password'\r\n                    id='password'\r\n                    placeholder='Пароль'\r\n                    type='password'\r\n                    autoComplete='password'\r\n                    validate={[required, maxLengthNum]}\r\n                />\r\n            </div>\r\n\r\n            <div>\r\n                <label htmlFor='rememberMe'>Запомнить</label>\r\n                <Field\r\n                    component={FormControl}\r\n                    formElement='input'\r\n\r\n                    name='rememberMe'\r\n                    id='rememberMe'\r\n                    type='checkbox'\r\n                />\r\n            </div>\r\n            {\r\n                props.captchaUrl &&\r\n                <div>\r\n                    <label htmlFor='captcha'>Введите капчу</label>\r\n                    <Field\r\n                        component={FormControl}\r\n                        formElement='input'\r\n\r\n                        name='captcha'\r\n                        id='captcha'\r\n                        type='input'\r\n                        validate={[required]}\r\n                    />\r\n                    <img src={props.captchaUrl} alt='captcha' />\r\n                </div>\r\n            }\r\n\r\n\r\n            <div>\r\n                <button type='submit' >Войти</button>\r\n            </div>\r\n\r\n            {\r\n                props.error && <div className={styles.formSummaryError}>{props.error}</div>\r\n            }\r\n        </form>\r\n    )\r\n}\r\n\r\nlet LoginReduxForm = reduxForm({ form: 'login' })(LoginForm)\r\n\r\nconst Login = (props) => {\r\n    const onSubmit = (formData) => {\r\n        props.login(formData.email, formData.password, formData.rememberMe, formData.captcha)\r\n    }\r\n\r\n    if (props.isAuth) return <Navigate to={'/profile'} />\r\n\r\n    return (\r\n        <>\r\n            <h1>LOGIN</h1>\r\n            <LoginReduxForm onSubmit={onSubmit} captchaUrl={props.captchaUrl}/>\r\n        </>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n    isAuth: state.auth.isAuth,\r\n    captchaUrl: state.auth.captchaUrl\r\n})\r\n\r\nexport default connect(mapStateToProps, {\r\n    login,\r\n    getCaptchaUrl\r\n})(Login)","import React from \"react\";\r\nimport styles from './FormsControls.module.css'\r\n\r\nexport const FormControl = ({input, meta, formElement, ...props}) => {\r\n    let hasError = meta.touched && meta.error\r\n\r\n    return (\r\n    <div className={styles.formControl + ' ' + (hasError ? styles.error : '')}>\r\n        {React.createElement(formElement, {...input, ...props})}\r\n        {hasError && <p>{meta.error}</p>}\r\n    </div>\r\n    )\r\n}","export const required = (value) => {\r\n    if (value) {\r\n        return undefined\r\n    }\r\n    return 'Поле обязательно!'\r\n}\r\n\r\nexport const maxLength = (maxLength) => (value) => {\r\n    if (value.length > maxLength) {\r\n        return `Длина свыше ${maxLength} символов!`\r\n    }\r\n    return undefined\r\n}","// extracted by mini-css-extract-plugin\nexport default {\"formControl\":\"FormsControls_formControl__07Mix\",\"error\":\"FormsControls_error__BSYle\",\"formSummaryError\":\"FormsControls_formSummaryError__GCzur\"};"],"names":["maxLengthNum","maxLength","LoginReduxForm","reduxForm","form","props","onSubmit","handleSubmit","htmlFor","component","FormControl","formElement","name","id","placeholder","type","autoComplete","validate","required","captchaUrl","src","alt","error","className","styles","connect","state","isAuth","auth","login","getCaptchaUrl","to","formData","email","password","rememberMe","captcha","input","meta","hasError","touched","React","value","length"],"sourceRoot":""}